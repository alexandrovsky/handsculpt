using UnityEngine;
using System.Collections;
using Leap;
public class ShadowTool : ManipulationHandTool 
{	


	public float MinActivationVelocity = 100.0f;
	GameObject gizmo;
	public override void Start () {
		name = "shadow";
		workingHandIdx = 0;
		base.Start();
		mode = HandTool.HandToolMode.Enabled;

		gizmo = GameObject.CreatePrimitive(PrimitiveType.Sphere);
		gizmo.transform.localScale = new Vector3(0.2f,0.2f,0.2f);

		//deactivatePalm();
	}
	
	public override void CostumGUI(){
		GUILayout.TextField( "num selected vertices: " + selectedVertices.Count);
		GUILayout.TextField( "recursion counter: " + this.debugRecursionCount);
		GUILayout.TextField( "min distance: " + minDistance);
		debugGizmos = GUILayout.Toggle(debugGizmos, "debug gizmos");
		if(debugGizmos){
			debugGizmoVertices = GUILayout.Toggle(debugGizmoVertices, "gizmos verts");
		}
	}

	public override void ManipulateVertices (Bounds toolBounds, Transform transform)
	{
		foreach(int v_idx in selectedVertices.Keys ){
			float distance = selectedVertices[v_idx];
			Vector3 vertex = transform.TransformPoint( vertices[v_idx] );

			Vector3 direction = vertex - toolBounds.center;
//			Debug.DrawLine(vertex, vertex + direction, Color.cyan);
			vertex += direction.normalized * radius * Time.deltaTime;

			octree.UpdateTree(v_idx, vertex);
			colors[v_idx] = ManipulationColor();
			vertices[v_idx] = transform.InverseTransformPoint(vertex);
		}

		PushMeshData();
		
	}

	public override void ManipulateVertices(RaycastHit hit, float radius){
//		foreach(int v_idx in selectedVertices.Keys ){
//			// float distance = selectedVertices[v_idx];
//			Vector3 vertex = hit.transform.TransformPoint( vertices[v_idx] );
//
//			// -- begin manipulation vertex:
//			// flatten:
//			float distanceFromHitPlane = MathHelper.SignedDistancePlanePoint(hit.normal.normalized, hit.point, vertex);
//
//
//			Vector3 direction = hit.normal.normalized * distanceFromHitPlane - hit.normal.normalized * maxDistanceFromHit;
//			vertex -= direction * strength * Time.deltaTime;
//
////			Debug.DrawLine(vertex,vertex + direction, Color.cyan);
//
//			// ---- end manipulation vertex
//			colors[v_idx] = ManipulationColor();
//			vertices[v_idx] = hit.transform.InverseTransformPoint(vertex);
//		}
//		PushMeshData();
	}


	public override void Update ()
	{
		base.Update();

		if( ! hand.IsValid 
		   || HandTool.HandToolMode.Disabled == mode)
		{
			return; // --- OUT --->
		}

//		radius = 2.0f;
		Bounds toolBounds = palm.transform.renderer.bounds;
		toolBounds.extents = toolBounds.extents * radius;
		SelectVertices(toolBounds);
		if(minDistance < MinActivationDistance){
			ManipulateVertices(toolBounds, target.transform);
		}

	}

//	public override void Update () 
//	{
//		//Debug.Log("Shadow Update");
//
//		RaycastHit hit;
//		Ray ray;
//		if(Input.GetMouseButtonDown(0))
//		{	
//			ray = Camera.main.ScreenPointToRay(Input.mousePosition);
//			if(Physics.Raycast(ray, out hit) ){
//
//				//applyTool(hit);
//				//Debug.DrawLine(ray.origin, ray.direction*100, Color.red, 2000.0f,false);
//				SelectVertices(hit, radius);
//			}
//				
//		}
//		base.Update();
//
//
//		if(!hand.IsValid){
//			return; // --- OUT --->
//		}
//
//		if(HandTool.HandToolMode.Disabled == mode){
//			return; // --- OUT --->
//		}
//
//
//
////		radius = hand.SphereRadius * Leap.UnityVectorExtension.ScaleFactor;
//		float scale = hand.SphereRadius * Leap.UnityVectorExtension.ScaleFactor;
//		radius = 10 * scale / target.transform.localScale.x; // + Mathf.Pow( 2, scale );
//
//		//radius = 1.0f;
//
////		Vector3 rayStart = hand.PalmPosition.ToUnityTranslated();
////		Vector3 rayEnd = rayStart - hand.PalmNormal.ToUnityTranslated();
//
//
//
//
////		float targetScale = target.transform.localScale.magnitude;
////		Debug.Log("palm: " + rayStart + "target scale" + targetScale);
////		if( Vector3.Distance(rayStart, target.transform.position) < targetScale ){
////			rayEnd = -1 * rayEnd;
////		}
////		Debug.DrawLine(rayStart, rayEnd);
//
//		Vector3 rayStart = palm.transform.position;
//		Vector3 rayEnd = -palm.transform.up;
////
//
////		Vector3 rayStart = 10.0f* hand.StabilizedPalmPosition.ToUnityTranslated().normalized;
////		Vector3 rayEnd = hand.PalmNormal.ToUnityTranslated().normalized;
//
//
////		Debug.DrawLine(rayStart, palm.transform.position, Color.green);
////		Debug.DrawLine(palm.transform.position, rayEnd, Color.yellow);
//		gizmo.transform.position = rayStart + rayEnd.normalized;
//
//		ray = new Ray(rayStart, rayEnd);
//		if(Physics.Raycast(ray, out hit) ){
//
////			Debug.DrawLine(rayStart, hit.point,Color.cyan);
//
//			if(hit.collider.tag  != "Touchable"){
//				return;
//			}
//
////			float targetScale = target.transform.localScale.magnitude;
//
//
//			// set the right mode:
////			if(hit.distance < MinActivationDistance ){ //&& hand.PalmVelocity.Magnitude > MinActivationVelocity){
//			if(palm.transform.position.magnitude < MinActivationDistance ){
//				mode = HandTool.HandToolMode.Manipulate;
//				SelectVertices(hit, radius);
//				ManipulateVertices(hit, radius);
//
//			}else{
//				mode = HandTool.HandToolMode.Select;
//				SelectVertices(hit, radius);
//			}
//		}
//	}



	public override void OnDestroy(){
		activatePalm();
		base.OnDestroy();
	}
}
