// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System.Collections.Generic;
using UnityEngine;

public class Geometry
{
	public static void triangleNormal(Vector3 v1, Vector3 v2, Vector3 v3, out Vector3 normal){
		normal = (v1 + v2 + v3) / 3;
	}

	public static void triangleAabb(Vector3 v1, Vector3 v2, Vector3 v3, out Bounds aabb){
		aabb = new Bounds();
//			aabb.Encapsulate(v1);
//			aabb.Encapsulate(v2);
//			aabb.Encapsulate(v3);


		Vector3 min = Vector3.Min(v1, v2);
		min = Vector3.Min(min, v3);

		Vector3 max = Vector3.Min(v1, v2);
		max = Vector3.Max(max, v3);

//			Bounds aabb2 = new Bounds();
		aabb.SetMinMax(min, max);
	}

//	public static bool boundsIntersectSphere(Bounds aabb, Vector3 c, float r){
//
//		Vector3 min = aabb.min,
//		max = aabb.max;
//		float vx = c[0],
//		vy = c[1],
//		vz = c[2];
//		float dx = 0.0f,
//		dy = 0.0f,
//		dz = 0.0f;
//		
//		if (min[0] > vx) dx = min[0] - vx;
//		else if (max[0] < vx) dx = max[0] - vx;
//		else dx = 0.0f;
//		
//		if (min[1] > vy) dy = min[1] - vy;
//		else if (max[1] < vy) dy = max[1] - vy;
//		else dy = 0.0f;
//		
//		if (min[2] > vz) dz = min[2] - vz;
//		else if (max[2] < vz) dz = max[2] - vz;
//		else dz = 0.0f;
//		
//		return (dx * dx + dy * dy + dz * dz) < r;
//
//	}

	public static bool boundsIntersectSphere(Bounds aabb, Vector3 c, float r){
		return StaticTest(aabb.min, aabb.max, c, r);
	}
	public static bool StaticTest(Vector3 aabbMin, Vector3 aabbMax, Vector3 sphereCenter, float sphereRadius)
	{
		Vector3 closestPointInAabb = Vector3.Min(Vector3.Max(sphereCenter, aabbMin), aabbMax);
		float distanceSquared = (closestPointInAabb - sphereCenter).sqrMagnitude;
		
		// The AABB and the sphere overlap if the closest point within the rectangle is
		// within the sphere's radius
		return distanceSquared < (sphereRadius );//* sphereRadius);
	}
}


