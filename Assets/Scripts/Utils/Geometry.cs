// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System.Collections.Generic;
using UnityEngine;

public class Geometry
{
	public static void triangleNormal(Vector3 v1, Vector3 v2, Vector3 v3, out Vector3 normal){
		normal = (v1 + v2 + v3) / 3;
	}

	public static void triangleAabb(Vector3 v1, Vector3 v2, Vector3 v3, out Bounds aabb){
		aabb = new Bounds();

		Vector3 min = Vector3.Min(v1, v2);
		min = Vector3.Min(min, v3);

		Vector3 max = Vector3.Min(v1, v2);
		max = Vector3.Max(max, v3);
		aabb.center = (min + max) * 0.5f;
		aabb.Encapsulate(v1);
		aabb.Encapsulate(v2);
		aabb.Encapsulate(v3);
	}

	public static bool boundsIntersectSphere(Bounds aabb, Vector3 c, float r){
		return StaticTest(aabb.min, aabb.max, c, r);
	}

	//http://blog.nuclex-games.com/tutorials/collision-detection/static-sphere-vs-aabb/
	public static bool StaticTest(Vector3 aabbMin, Vector3 aabbMax, Vector3 sphereCenter, float sphereRadius)
	{
		Vector3 closestPointInAabb = Vector3.Min(Vector3.Max(sphereCenter, aabbMin), aabbMax);
		float distanceSquared = (closestPointInAabb - sphereCenter).sqrMagnitude;
		
		// The AABB and the sphere overlap if the closest point within the rectangle is
		// within the sphere's radius
		return distanceSquared < (sphereRadius );//* sphereRadius);
	}
}


